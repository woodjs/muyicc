@mixin folded-corner($background, $size, $angle: 30deg) {
 position: relative;
 background: $background;
 background: linear-gradient($angle - 180deg, transparent $size, $background 0);
 border-radius: .5em;

 $x: $size / sin($angle);
 $y: $size / cos($angle);

 &::before {
  content: '';
  position: absolute;
  top: 0;
  right: 0;
  background: linear-gradient(to left bottom, transparent 50%, rgba(0, 0, 0, 0.2) 0, rgba(0, 0, 0, 0.4)) 100% 0 no-repeat;
  width: $y;
  height: $x;
  transform: translateY($y - $x) rotate(2*$angle - 90deg);
  transform-origin: bottom right;
  border-bottom-left-radius: inherit;
  box-shadow: -.2em .2em .3em -.1em rgba(0, 0, 0, .2);
 }
}

@function pow($number, $exp) {
 $value: 1;
 @if $exp > 0 {
  @for $i from 1 through $exp {
   $value: $value * $number;
  }
 } @else if $exp < 0 {
  @for $i from 1 through -$exp {
   $value: $value / $number;
  }
 }
 @return $value;
}

@function fact($number) {
 $value: 1;
 @if $number > 0 {
  @for $i from 1 through $number {
   $value: $value * $i;
  }
 }
 @return $value;
}

@function pi() {
 @return 3.14159265359;
}

@function rad($angle) {
 $unit: unit($angle);
 $unitless: $angle / ($angle * 0 + 1);
 @if $unit == deg {
  $unitless: $unitless / 180 * pi();
 }
 @return $unitless;
}

@function sin($angle) {
 $sin: 0;
 $angle: rad($angle);
 @for $i from 0 through 10 {
  $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
 }
 @return $sin;
}

@function cos($angle) {
 $cos: 0;
 $angle: rad($angle);
 @for $i from 0 through 10 {
  $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
 }
 @return $cos;
}

@function tan($angle) {
 @return sin($angle) / cos($angle);
}